# Add steps that analyze code, save build artifacts, deploy, and more:
# https://stacksimplify.com/azure-aks/azure-devops-create-starter-pipeline-for-aks/
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/key-pipelines-concepts?view=azure-devops
# Stages -> Stage -> Jobs -> Job -> Steps -> Task1, Task2, Task3 , Script ,Script


# A trigger tells a Pipeline to run. A trigger is something that's set up to tell the pipeline when to run. 
trigger:
  - main
  # Each agent can run only one job at a time. To run multiple jobs in parallel you must configure multiple agents. You also need sufficient parallel jobs.
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=browser
  # To build your code or deploy your software using Azure Pipelines, you need at least one agent
  # Each agent runs a job that contains one or more steps.
  # An agent is computing infrastructure with installed agent software that runs one job at a time. 
  # An agent that you set up and manage on your own to run jobs is a self-hosted agent.
  # Self-hosted agents give you more control to install dependent software needed for your builds and deployments. 
  # Also, machine-level caches and configuration persist from run to run, which can boost speed.
  # Although multiple agents can be installed per machine, we strongly suggest to only install one agent per machine. 
  # Installing two or more agents may adversely affect performance and the result of your pipelines.
pool:
  name: Default
    
variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'ebdb39cb-7bad-4abe-a3a4-da7e743608f4'

  # Web app name
  webAppName: 'java-spring-boot222'

  # Environment name
  environmentName: 'java-spring-boot222'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

# A stage is a logical boundary in the pipeline. It can be used to mark separation of concerns (for example, Build, QA, and production).
# A pipeline is made up of one or more stages.
# A stage is a way of organizing jobs in a pipeline and each stage can have one or more jobs.
# Each stage contains one or more jobs. When you define multiple stages in a pipeline, by default, they run one after the other. You can specify the conditions for when a stage runs. 
stages:
  - stage: Build
    displayName: Build stage with Maven
    # A stage contains one or more jobs. Each job runs on an agent. A job represents an execution boundary of a set of steps.
    # All of the steps run together on the same agent. Jobs are most useful when you want to run a series of steps in different environments.
    # For example, you might want to build two configurations - x86 and x64. In this case, you have one stage and two jobs. 
    # One job would be for x86 and the other job would be for x64.
    # Each job runs on one agent. A job can also be agentless. 
    # Job that contains one or more steps.
    jobs:
    - job: JOB1
      steps:
      - script: echo JOB1
      - script: echo JOB1-1
    - job: JOB2
      steps:
      - script: echo JOB2
    - job: JOB3
    # By default, a job runs if it does not depend on any other job, or if all of the jobs that it depends on have completed and succeeded. 
      dependsOn: JOB2
      steps:
        #A script runs code as a step in your pipeline using command line, PowerShell, or Bash. You can write cross-platform scripts for macOS, Linux, and Windows. 
        # Unlike a task, a script is custom code that is specific to your pipeline.
        # A step can either be a script or a task. A task is simply a pre-created script offered as a convenience to you.
      - script: echo JOB3   
      # When you define multiple jobs in a single stage, you can specify dependencies between them.
      # Pipelines must contain at least one job with no dependencies.
    - job: MavenPackageAndPublishArtifacts
      displayName: Maven Package and Publish Artifacts
  
      # A step can be a task or script and is the smallest building block of a pipeline.
      steps:
        #A task is a pre-packaged script that performs an action, such as invoking a REST API or publishing a build artifact.
        # A step can either be a script or a task. A task is simply a pre-created script offered as a convenience to you.
        # A task is the building block for defining automation in a pipeline.
        # A task is packaged script or procedure that has been abstracted with a set of inputs.
      - task: Maven@3
        displayName: 'Maven Package'
        inputs:
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/maven?view=azure-devops
          mavenPomFile: 'pom.xml'
          goals: 'clean package'
          testRunTitle: test run title by Mahdi
  
      - task: CopyFiles@2
        displayName: 'Copy Files to artifact staging directory'
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)'
          Contents: '**/target/*.?(war|jar)'
          TargetFolder: $(Build.ArtifactStagingDirectory)
          OverWrite: true
      # List files from Build Artifact Staging Directory - After Copy
      - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory) 
      - publish: $(Build.ArtifactStagingDirectory)
        # An artifact is a collection of files or packages published by a run.
        artifact: drop
  
  - stage: Deploy
    displayName: Deploy stage
    # You can specify the conditions under which each stage, job, or step runs. By default, a job or stage runs if 
    # it does not depend on any other job or stage, or if **all of the jobs or stages** that it depends on have completed and succeeded. 
    # By default, a step runs if nothing in its job has failed yet and the step immediately preceding it has finished.
  
    dependsOn: Build
    # By default, steps, jobs, and stages run if all previous steps/jobs have succeeded. It's as if you specified "condition: succeeded()"
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-status-functions
    condition: succeeded()
    jobs:
    - deployment: DeployLinuxWebApp
      displayName: Deploy Linux Web App
      # An environment is a collection of resources, where you deploy your application.
      # It can contain one or more virtual machines, containers, web apps, or any service that's used to host the application being developed. 
      # \A pipeline might deploy the app to one or more environments after build is completed and tests are run.
      environment: $(environmentName)
  
      # For Classic pipelines, a release is a versioned set of artifacts specified in a pipeline.
      strategy:
        runOnce:
          deploy:
            #A step is the smallest building block of a pipeline. For example, a pipeline might consist of build and test steps.
            #  A step can either be a script or a task. A task is simply a pre-created script offered as a convenience to you.
            steps:
            - task: AzureWebApp@1
              displayName: 'Azure Web App Deploy: java-spring-boot222'
              inputs:
                azureSubscription: $(azureSubscription)
                appType: webAppLinux
                appName: $(webAppName)
                package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'
  